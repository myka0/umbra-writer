generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  account       Account[]
  sessions      Session[]
  directories   Directory[]
  documents     Document[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("users")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime
  sessionToken String @unique
  createdAt DateTime @default(now())

  @@map("sessions")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id])
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  type              String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  subscribed        Boolean @default(false)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("verification_tokens")
}

model Directory {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  parentId  String?     @db.ObjectId
  parent    Directory?  @relation("Subdirectories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subdirectories Directory[] @relation("Subdirectories") 
  documents Document[] 
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("directories")
}

model Document {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  directoryId String?     @db.ObjectId
  directory   Directory?  @relation(fields: [directoryId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("documents")
}
